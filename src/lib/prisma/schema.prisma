generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////
// AUTHENTIFICATION //
//////////////////////

model User {
  id            String       @id
  name          String
  email         String       @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  memberships   Membership[]
  leaves        Leave[]
  leaveBalances LeaveBalance[]

  managedLeaves Leave[]      @relation("LeaveManager")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//////////////////////////
// STRUCTURE D'ENTREPRISE //
//////////////////////////

model Company {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  memberships Membership[]

  @@map("company")
}

model Membership {
  id        String     @id @default(uuid())
  userId    String
  companyId String
  role      UserRole   @default(EMPLOYEE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("membership")
}

enum UserRole {
  EMPLOYEE
  MANAGER
}

////////////////////////
// GESTION DES CONGÃ‰S //
////////////////////////

model LeaveType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leaves      Leave[]
  balances    LeaveBalance[]

  @@map("leave_type")
}

model LeaveBalance {
  id          String     @id @default(uuid())
  userId      String
  leaveTypeId String
  balance     Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType   LeaveType  @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, leaveTypeId])
  @@map("leave_balance")
}

model Leave {
  id          String       @id @default(uuid())
  userId      String
  leaveTypeId String
  managerId   String?
  startDate   DateTime
  endDate     DateTime
  status      LeaveStatus  @default(PENDING)
  reason      String?
  managerNote String?
  reviewedAt  DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType   LeaveType    @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)
  manager     User?        @relation("LeaveManager", fields: [managerId], references: [id])

  @@map("leave")
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}
