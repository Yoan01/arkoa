generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id
  name                String
  email               String                @unique
  emailVerified       Boolean
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  sessions            Session[]
  accounts            Account[]
  managedLeaves       Leave[]               @relation("LeaveManager")
  leaveBalanceHistory LeaveBalanceHistory[] @relation("LeaveBalanceHistoryActor")
  memberships         Membership[]          @relation("AllMemberships")


  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Company {
  id              String       @id @default(uuid())
  name            String       @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  logoUrl         String?
  annualLeaveDays Int          @default(25)
  memberships     Membership[]

  @@map("company")
}

model Membership {
  id            String         @id @default(uuid())
  userId        String
  companyId     String
  role          UserRole       @default(EMPLOYEE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  leaves        Leave[]
  leaveBalances LeaveBalance[]
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user          User           @relation("AllMemberships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("membership")
}

model Leave {
  id            String         @id @default(uuid())
  managerId     String?
  startDate     DateTime
  endDate       DateTime
  status        LeaveStatus    @default(PENDING)
  reason        String?
  managerNote   String?
  reviewedAt    DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  membershipId  String
  type          LeaveType
  halfDayPeriod HalfDayPeriod?
  manager       User?          @relation("LeaveManager", fields: [managerId], references: [id])
  membership    Membership     @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
  @@map("leave")
}

model LeaveBalance {
  id            String                @id @default(uuid())
  membershipId  String
  type          LeaveType
  remainingDays Float
  updatedAt     DateTime              @updatedAt
  createdAt     DateTime              @default(now())
  membership    Membership            @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  history       LeaveBalanceHistory[]

  @@unique([membershipId, type])
  @@map("leave_balance")
}

model LeaveBalanceHistory {
  id             String       @id @default(uuid())
  leaveBalanceId String
  change         Float
  reason         String?
  type           LeaveBalanceHistoryType
  actorId        String?
  createdAt      DateTime     @default(now())
  actor          User?        @relation("LeaveBalanceHistoryActor", fields: [actorId], references: [id])
  leaveBalance   LeaveBalance @relation(fields: [leaveBalanceId], references: [id], onDelete: Cascade)

  @@index([leaveBalanceId])
  @@map("leave_balance_history")
}

enum UserRole {
  EMPLOYEE
  MANAGER
}

enum LeaveType {
  PAID              // Congés payés (CP)
  UNPAID            // Congé sans solde
  RTT               // Réduction du temps de travail
  SICK              // Maladie
  MATERNITY         // Maternité
  PATERNITY         // Paternité
  PARENTAL          // Parental
  BEREAVEMENT       // Deuil
  MARRIAGE          // Mariage
  MOVING            // Déménagement
  CHILD_SICK        // Enfant malade
  TRAINING          // Formation
  UNJUSTIFIED       // Absence injustifiée
  ADJUSTMENT        // Ajustement manuel (rachat, report, etc.)
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum HalfDayPeriod {
  MORNING
  AFTERNOON
}

enum LeaveBalanceHistoryType {
  AUTO_CREDIT          // Auto credit by system
  MANUEL_CREDIT        // Manual credit by manager
  LEAVE_REFUND         // Refund when leave is rejected
  LEAVE_DEDUCTION      // Deduction when leave is taken
  CARRY_FORWARD        // Carry forward from previous year
  EXPIRATION           // Expiration of unused days
}
